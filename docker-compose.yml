services:
  # ==============================
  # 🐳 Watchtower 自动更新服务
  # ==============================
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      TZ: "Asia/Shanghai"
      WATCHTOWER_NOTIFICATIONS: "shoutrrr"
      WATCHTOWER_NOTIFICATION_REPORT: "true"
      WATCHTOWER_NOTIFICATIONS_LEVEL: ${WATCHTOWER_NOTIFICATION_LEVEL:-info}
      WATCHTOWER_NOTIFICATION_URL: "telegram://${BOT_TOKEN}@telegram/?chats=${ALLOWED_CHAT_ID}"
      WATCHTOWER_NOTIFICATION_TEMPLATE: |-
        {{- with .Report -}}
        📊 **容器更新报告**
        ---
        🔍 扫描总数：{{len .Scanned}}
        ✔️ 成功更新：{{len .Updated}}
        ⚠️ 跳过更新：{{len .Skipped}}
        ❌ 更新失败：{{len .Failed}}
        {{- if .Updated }}
        ✳️ **已更新容器：**
        {{- range .Updated }}
        - 容器名称：{{.Name}}
          镜像：{{.ImageName}}
          旧版本 ID：{{.CurrentImageID.ShortID}}
          新版本 ID：{{.LatestImageID.ShortID}}
        {{- end }}
        {{- end }}
        {{- if .Skipped }}
        ⚠️ **跳过更新的容器：**
        {{- range .Skipped }}
        - 容器名称：{{.Name}}
          镜像：{{.ImageName}}
          状态：{{if eq .State "running"}}🟢 已启动{{else}}🛑 已停止{{end}}
          原因：{{.Error}}
        {{- end }}
        {{- end }}
        {{- if .Failed }}
        🛑 **更新失败的容器：**
        {{- range .Failed }}
        - 容器名称：{{.Name}}
          镜像：{{.ImageName}}
          状态：{{if eq .State "running"}}🟢 已启动{{else}}🛑 已停止{{end}}
          错误信息：{{.Error}}
        {{- end }}
        {{- end }}

        🧹 **系统清理报告**
        ---
        🗑️ 删除停止容器：{{or .Cleanup.RemovedContainers 0}} 个
        🧱 删除无标签镜像：{{or .Cleanup.RemovedImages 0}} 个
        💾 删除未使用卷：{{or .Cleanup.RemovedVolumes 0}} 个
        🌐 删除未使用网络：{{or .Cleanup.RemovedNetworks 0}} 个
        ✅ 状态：{{if .Cleanup.HasCleanup}}已清理{{else}}系统状态良好{{end}}
        {{- end -}}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --schedule
      - ${WATCHTOWER_SCHEDULE}  # 使用环境变量中的定时设置
      - --cleanup
      - --include-restarting
      - --notification-report
      - --notifications-level=${WATCHTOWER_NOTIFICATION_LEVEL:-info}
    restart: unless-stopped

  # ==============================
  # 🤖 Watchtower 控制机器人
  # ==============================
  watchtower-bot:
    build: .
    container_name: watchtower-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${BOT_TOKEN}
      - ALLOWED_CHAT_ID=${ALLOWED_CHAT_ID}
      - DOCKER_SOCKET_PATH=/var/run/docker.sock
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE}  # 传递定时设置给 Bot
      - WATCHTOWER_NOTIFICATION_LEVEL=${WATCHTOWER_NOTIFICATION_LEVEL:-info}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
